(defun check-sorted (arr &optional (start 0))
  (do ((i start (1+ i)))
      ((>= i (1- (length arr))) t)
      (when (> (aref arr i) (aref arr (1+ i)))
        (return))))

(defun swap-case (arr)
  (do ((arr (concatenate 'vector #(0) arr #(10000001)))
       (i 1 (1+ i))
       (swap1 nil)
       (swap2 nil))
      ((>= i (1- (length arr)))
       (if (and swap1 swap2)
           (progn (psetf (aref arr swap1) (aref arr swap2)
                         (aref arr swap2) (aref arr swap1))
                  (values (check-sorted arr) swap1 swap2))
           (values t nil nil)))
      (when (and (not swap1) (> (aref arr i) (aref arr (1+ i))))
        (setf swap1 i))
      (when (and swap1 (or (not swap2) (< (aref arr i) (aref arr swap2))))
        (setf swap2 i))))

(defun reverse-ans (arr l r)
  (values (check-sorted (concatenate 'vector 
                                     (subseq arr 0 l) 
                                     (nreverse (subseq arr l (1+ r)))
                                     (subseq arr (1+ r))))
          l r))

(defun reverse-case (arr)
  (do ((arr (concatenate 'vector #(0) arr #(10000001)))
       (l nil)
       (i 1 (1+ i)))
      ((>= i (1- (length arr)))
       (if l
           (reverse-ans arr l i)
           (values t nil nil)))
      (when (and (not l) (> (aref arr i) (aref arr (1+ i))))
        (setf l i))
      (when (and l (< (aref arr i) (aref arr (1+ i))))
        (return (reverse-ans arr l i)))))

(defun read-array ()
  (let* ((n (read))
         (arr (make-array n :element-type 'fixnum)))
    (dotimes (i n arr)
      (setf (aref arr i) (read)))))

(defun run-case (arr case name)
  (multiple-value-bind (yes l r) (funcall case arr)
    (when yes
      (format t "yes~%") 
      (when (and l r)
        (format t "~A ~A ~A~%" name l r))
      yes)))

(defun main ()
  (let* ((arr (read-array))
         (swap (run-case arr #'swap-case "swap")))
    (when (not swap)
      (let ((rev (run-case arr #'reverse-case "reverse")))
        (when (not rev)
          (format t "no~%"))))))


(main)


(run-case #(1 9 3 4 5 2) #'swap-case)
(swap-case #(1 9 3 4 5 2))
(swap-case #(1 9 3 4 5 6))
(swap-case #(1 2 3 8 7 4))
(swap-case #(5 4))

(reverse-case #(1 5 4 6))
(reverse-case #(1 5 4 3 2 6))
(reverse-case #(6 4 3 2 1))
(reverse-case #(7 6 5 4 3 2 1 8))
(reverse-case #(1 6 5 4 7))

