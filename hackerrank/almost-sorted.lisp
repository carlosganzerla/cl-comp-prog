(defun check-sorted (arr &optional (start 0))
  (do ((i start (1+ i)))
      ((>= i (1- (length arr))) t)
      (when (> (aref arr i) (aref arr (1+ i)))
        (return))))

(defun swap-case (arr)
  (do ((arr (concatenate 'vector #(0) arr #(10000001)))
       (i 1 (1+ i))
       (swap1 nil)
       (swap2 nil))
    ((>= i (1- (length arr)))
     (if (and swap1 swap2)
       (progn (psetf (aref arr swap1) (aref arr swap2)
                     (aref arr swap2) (aref arr swap1))
              (values (check-sorted arr) swap1 swap2))
       (values t nil nil)))
    (when (and (not swap1) (> (aref arr i) (aref arr (1+ i))))
      (setf swap1 i))
    (when (and swap1 (or (not swap2) (< (aref arr i) (aref arr swap2))))
      (setf swap2 i))))


(swap-case #(1 9 3 4 5 2))
(swap-case #(1 9 3 4 5 6))
(swap-case #(1 2 3 8 7 4))
(swap-case #(5 4))
