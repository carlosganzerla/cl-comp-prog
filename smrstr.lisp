(declaim (optimize (speed 3) (safety 0) (debug 0)))

(defmacro with-gensyms (syms &body body)
  `(let (,@(mapcar (lambda (s) `(,s (gensym))) syms))
     ,@body))

(defmacro for ((var from to &optional result) &body body)
  (with-gensyms (%from %to)
    `(let ((,%from ,from) (,%to ,to))
       (do ((,var ,%from (1+ ,var)))
           ((>= ,var ,%to) ,result)
           (declare (fixnum ,var ,%from ,%to))
           ,@body))))

(defun read-n-numbers (n &optional (fn #'identity))
  (let* ((line (read-line))
         (str (make-string-input-stream line))
         (result (make-array n :element-type 'fixnum)))
    (declare (string line) (stream str) ((array fixnum) result))
    (for (i 0 n result) 
      (setf (aref result i) (funcall fn (read str))))))

(defun read-and-multiply (n)
  (let* ((prod 1)
         (line (read-line))
         (str (make-string-input-stream line)))
    (for (i 0 n prod)
      (declare (fixnum prod))
      (setf prod (* (read str) prod)))))

(defun run-case ()
  (let* ((n-and-q (read-n-numbers 2))
         (divisor (read-and-multiply (aref n-and-q 0))))
    (declare (fixnum divisor) ((array fixnum) n-and-q))
    (read-n-numbers (aref n-and-q 1) (lambda (x) 
                                       (declare (fixnum x))
                                       (floor (/ x divisor))))))


(defun main ()
  (let* ((tests (read))
         (str (make-string-output-stream str))
         (answers (make-array tests :element-type '(or (array fixnum) symbol)
                              :initial-element nil )))
    (declare (fixnum tests) (array answers))
    (for (i 0 tests)
      (setf (aref answers i)(run-case)))
    (for (i 0 tests)
      (format t "~A" (aref answers i))
      (when (< i (1- tests))
        
        )
      )))

(main)
