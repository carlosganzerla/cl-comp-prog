(declaim (optimize (speed 3) (safety 0) (debug 0)))

(defmacro with-gensyms (syms &body body)
  `(let (,@(mapcar (lambda (s) `(,s (gensym))) syms))
     ,@body))

(defmacro for ((var from to &optional result) &body body)
  (with-gensyms (%from %to)
                `(let ((,%from ,from) (,%to ,to))
                   (do ((,var ,%from (1+ ,var)))
                       ((>= ,var ,%to) ,result)
                       (declare (fixnum ,var ,%from ,%to))
                       ,@body))))

(defun read-n-numbers (n &optional fn)
  (let* ((line (read-line))
         (str (make-string-input-stream line))
         (result (make-array n :element-type 'fixnum)))
    (declare (string line) (stream str) ((array fixnum) result))
    (for (i 0 n result) 
         (setf (aref result i) (or (and fn (funcall fn (read str)))
                                   (read str))))))

(defun read-and-multiply (n)
  (let* ((prod 1)
         (line (read-line))
         (str (make-string-input-stream line)))
    (for (i 0 n prod)
         (declare (fixnum prod))
         (setf prod (* (read str) prod)))))


(defun run-case ()
  (let* ((n-and-q (read-n-numbers 2))
         (divisor (read-and-multiply (aref n-and-q 0))))
    (declare (fixnum divisor) ((array fixnum) n-and-q))
    (read-n-numbers (aref n-and-q 1) (lambda (x)
                                       (declare (fixnum x))
                                       (floor (/ x divisor))))))

(defun print-array (arr &key (str *standard-output*) (size (length arr)))
  (declare ((array fixnum) arr) (stream str) (fixnum size))
  (let ((last-space (1- size)))
    (for (i 0 size)
         (format str "~A" (aref arr i))
         (when (< i last-space)
           (format str " ")))
    (format str "~%")))

(defvar *empty* #())

(defun main ()
  (let* ((tests (read))
         (answers (make-array tests :element-type '(array fixnum)
                              :initial-element *empty*)))
    (declare (fixnum tests))
    (for (i 0 tests)
         (setf (aref answers i) (run-case)))
    (for (i 0 tests)
         (print-array (aref answers i)))))

(with-open-file (str #p"test.txt" :direction :input)
  (let ((*standard-input* str))
    (time (read-and-multiply 100000))))
