(defun ans (arr)
  (do* ((n (length arr))
        (half 0)
        (sums (make-hash-table :size (/ (* n (1- n)) 2)))
        (i 0 (1+ i)))
    ((>= i (length arr))
     (progn 
       (maphash (lambda (k v)
                  (when (> v half)
                    (setf half v)))
                sums))
     (* 2 half))
    (do* ((j (1+ i) (1+ j)))
      ((>= j (length arr)))
      (let ((sum  (+ (aref arr i) (aref arr j))))
        (if (gethash sum sums) 
            (incf (gethash sum sums))
            (setf (gethash sum sums) 1))))))

(defun main ()
  (let ((arr (make-array (read) :element-type 'fixnum)))
    (dotimes (i (length arr) (format t "~A~%" (ans arr)))
      (ignore-errors (setf (aref arr i) (read))))))

(main)

(ans #(1 4 2 3 8 10))
(ans #(1 3 5 9 2 9 8 7 4))
(ans #(1 3 5 9 2 6 8 7 4))
#(3 5 9 7) #(8 6 2 4)
