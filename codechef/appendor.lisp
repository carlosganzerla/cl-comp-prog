(defun int->bit-vector (n &optional (size (safe-size n)))
  (declare (fixnum n size))
  (do ((vec (make-array size :element-type 'bit :initial-element 0))
       (d n (truncate (/ d 2)))
       (i (1- size) (1- i)))
      ((or (< i 0) (= n 0)) vec)
      (setf (bit vec i) (if (oddp d) 1 0))))

(defun bit-vector->int (vec)
  (declare (bit-vector vec))
  (do ((n 0)
       (i 0 (1+ i)))
      ((>= i (length vec)) n)
      (when (= 1 (bit vec i))
        (incf n (expt 2 (- (length vec) i 1))))))

(defun safe-size (n)
  (if (> n 0) 
      (1+ (floor (log n 2)))
      1))

(defun guess-x (A Y)
  (do* ((size (max (safe-size A) (safe-size Y)))
        (Avec (int->bit-vector A size))
        (Yvec (int->bit-vector Y size))
        (X (make-array size :element-type 'bit :initial-element 0))
        (i 0 (1+ i)))
    ((>= i size) (bit-vector->int X))
    (cond ((> (bit Avec i) (bit Yvec i)) (return -1))
          ((< (bit Avec i) (bit Yvec i)) (incf (bit X i))))))


(defun main ()
  (dotimes (_ (read))
    (let ((N (read))
          (Y (read))
          (A 0))
      (dotimes (_ N)
        (setf A (logior A (read))))
      (write (guess-x A Y))
      (terpri))))

(main)
