(declaim (optimize (speed 3) (safety 0) (debug 0)))

(defmacro with-gensyms (syms &body body)
  `(let (,@(mapcar (lambda (s) `(,s (gensym))) syms))
     ,@body))

(defmacro for ((var from to &optional result) &body body)
  (with-gensyms (%from %to)
    `(let ((,%from ,from) (,%to ,to))
       (do ((,var ,%from (1+ ,var)))
           ((>= ,var ,%to) ,result)
           (declare (fixnum ,var ,%from ,%to))
           ,@body))))

(defun read-n-numbers (n)
  (let* ((line (read-line))
         (str (make-string-input-stream line))
         (result (make-array n :element-type 'fixnum)))
    (declare (string line) (stream str) ((array fixnum) result))
    (for (i 0 n result) 
      (setf (aref result i) (read str)))))

(defun get-divisor (d)
  (declare ((array fixnum) d))
  (let ((result (aref d 0)))
    (declare (fixnum result))
    (for (i 1 (length d) result)
      (when (> (setf result (* (aref d i) result))
               1000000000)
        (return result)))))

(declaim (inline read-n-numbers get-divisor))

(defun main ()
  (for (i 0 (read))
    (let* ((n-and-q (read-n-numbers 2))
           (d (read-n-numbers (aref n-and-q 0)))
           (xs (read-n-numbers (aref n-and-q 1)))
           (divisor (get-divisor d)))
      (declare ((array fixnum) n-and-q d xs) (fixnum divisor))
      (for (i 0 (length xs))
        (format t "~A " (floor (/ (aref xs i) divisor))))
      (format t "~%"))))

(main)
