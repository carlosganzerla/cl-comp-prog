#+nil
(defun slow-ans (l r)
  (do ((s 0)
       (i l (1+ i)))
      ((> i r) s)
      (do ((j l (1+ j))
           (x l (logand x j)))
          ((> j i) (incf s x)))))

(defun fast-ans (l r)
  (do ((i 0 (1+ i))
       (sum 0)
       (max (- (1+ r) l))
       (nums 0))
      ((>= i (integer-length l)) sum)
      (let* ((e (expt 2 (1+ i)))
             (c (- e (mod l e)))
             (p (logxor l (mod l (expt 2 i))))
             (k (max 0 (min (* (- c nums)) (- max nums)))))
        (setf sum (mod (+ sum (* k p)) 1000000007))
        (incf nums k))))

(defun main ()
  (dotimes (_ (read))
    (format t "~A~%" (fast-ans (read) (read)))))

(main)

#+nil
(dotimes (_ 100 (format t "OK~%"))
  (let ((x (1+ (random 10000)))
        (y (1+ (random 10000))))
    (when (/= (slow-ans x y) (fast-ans x y))
      (format t "~A ~A" x y)
      (return))))
